/*
 * Silicon Motion SM712 frame buffer device
 *
 * Copyright (C) 2006 Silicon Motion Technology Corp.
 * Authors:	Ge Wang, gewang@siliconmotion.com
 *		Boyod boyod.yang@siliconmotion.com.cn
 *
 * Copyright (C) 2009 Lemote, Inc.
 * Author: Wu Zhangjin, wuzhangjin@gmail.com
 *
 *  This file is subject to the terms and conditions of the GNU General Public
 *  License. See the file COPYING in the main directory of this archive for
 *  more details.
 */

#define SMTC_LINUX_FB_VERSION	"version 0.11.2619.21.01 July 27, 2008"

#define FB_ACCEL_SMI_LYNX 88

#define SCREEN_X_RES      1024
#define SCREEN_Y_RES      600
#define SCREEN_BPP        16

/*Assume SM712 graphics chip has 4MB VRAM */
#define SM712_VIDEOMEMORYSIZE	  0x00400000

extern char *smtc_RegBaseAddress;
#define smtc_mmiowb(dat, reg)	writeb(dat, smtc_RegBaseAddress + reg)
#define smtc_mmioww(dat, reg)	writew(dat, smtc_RegBaseAddress + reg)
#define smtc_mmiowl(dat, reg)	writel(dat, smtc_RegBaseAddress + reg)

#define smtc_mmiorb(reg)	readb(smtc_RegBaseAddress + reg)
#define smtc_mmiorw(reg)	readw(smtc_RegBaseAddress + reg)
#define smtc_mmiorl(reg)	readl(smtc_RegBaseAddress + reg)

#define SIZE_SR00_SR04      (0x04 - 0x00 + 1)
#define SIZE_SR10_SR24      (0x24 - 0x10 + 1)
#define SIZE_SR30_SR75      (0x75 - 0x30 + 1)
#define SIZE_SR80_SR93      (0x93 - 0x80 + 1)
#define SIZE_SRA0_SRAF      (0xAF - 0xA0 + 1)
#define SIZE_GR00_GR08      (0x08 - 0x00 + 1)
#define SIZE_AR00_AR14      (0x14 - 0x00 + 1)
#define SIZE_CR00_CR18      (0x18 - 0x00 + 1)
#define SIZE_CR30_CR4D      (0x4D - 0x30 + 1)
#define SIZE_CR90_CRA7      (0xA7 - 0x90 + 1)
#define SIZE_VPR		(0x6C + 1)
#define SIZE_DPR		(0x44 + 1)

static void smtc_crtcw(int reg, int val)
{
	smtc_mmiowb(reg, 0x3d4);
	smtc_mmiowb(val, 0x3d5);
}

static void smtc_grphw(int reg, int val)
{
	smtc_mmiowb(reg, 0x3ce);
	smtc_mmiowb(val, 0x3cf);
}

static void smtc_attrw(int reg, int val)
{
	smtc_mmiorb(0x3da);
	smtc_mmiowb(reg, 0x3c0);
	smtc_mmiorb(0x3c1);
	smtc_mmiowb(val, 0x3c0);
}

static void smtc_seqw(int reg, int val)
{
	smtc_mmiowb(reg, 0x3c4);
	smtc_mmiowb(val, 0x3c5);
}

static unsigned int smtc_seqr(int reg)
{
	smtc_mmiowb(reg, 0x3c4);
	return smtc_mmiorb(0x3c5);
}

/* Bios have done this for us, we don't need to do it again. */

#if 0

/* The next structure holds all information relevant for a specific video mode.
 */

struct ModeInit {
	unsigned char Init_MISC;
	unsigned char Init_SR00_SR04[SIZE_SR00_SR04];
	unsigned char Init_SR10_SR24[SIZE_SR10_SR24];
	unsigned char Init_SR30_SR75[SIZE_SR30_SR75];
	unsigned char Init_SR80_SR93[SIZE_SR80_SR93];
	unsigned char Init_SRA0_SRAF[SIZE_SRA0_SRAF];
	unsigned char Init_GR00_GR08[SIZE_GR00_GR08];
	unsigned char Init_AR00_AR14[SIZE_AR00_AR14];
	unsigned char Init_CR00_CR18[SIZE_CR00_CR18];
	unsigned char Init_CR30_CR4D[SIZE_CR30_CR4D];
	unsigned char Init_CR90_CRA7[SIZE_CR90_CRA7];
} VGAMode = {
	/* We use 1024x768 table to light 1024x600 panel for lemote */
	/* Init_MISC */
	0xEB,
	{			/*  Init_SR0_SR4 */
		0x03, 0x01, 0x0F, 0x00, 0x0E,
	},
	{			/*  Init_SR10_SR24 */
		0xC8, 0x40, 0x14, 0x60, 0x00, 0x0A, 0x17, 0x20,
		0x51, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xC4, 0x30, 0x02, 0x00, 0x01,
	},
	{			/*  Init_SR30_SR75 */
		0x22, 0x03, 0x24, 0x09, 0xC0, 0x22, 0x22, 0x22,
		0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x03, 0xFF,
		0x00, 0xFC, 0x00, 0x00, 0x20, 0x18, 0x00, 0xFC,
		0x20, 0x0C, 0x44, 0x20, 0x00, 0x22, 0x22, 0x22,
		0x06, 0x68, 0xA7, 0x7F, 0x83, 0x24, 0xFF, 0x03,
		0x00, 0x60, 0x59, 0x22, 0x22, 0x00, 0x00, 0x22,
		0x01, 0x80, 0x7A, 0x1A, 0x1A, 0x00, 0x00, 0x00,
		0x50, 0x03, 0x16, 0x02, 0x0D, 0x82, 0x09, 0x02,
		0x04, 0x45, 0x3F, 0x30, 0x40, 0x20,
	},
	{			/*  Init_SR80_SR93 */
		0xFF, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x3A,
		0xF7, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3A, 0x3A,
		0x00, 0x00, 0x00, 0x00,
	},
	{			/*  Init_SRA0_SRAF */
		0x00, 0xFB, 0x9F, 0x01, 0x00, 0xED, 0xED, 0xED,
		0x7B, 0xFB, 0xFF, 0xFF, 0x97, 0xEF, 0xBF, 0xDF,
	},
	{			/*  Init_GR00_GR08 */
		0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
		0xFF,
	},
	{			/*  Init_AR00_AR14 */
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		0x41, 0x00, 0x0F, 0x00, 0x00,
	},
	{			/*  Init_CR00_CR18 */
		0xA3, 0x7F, 0x7F, 0x00, 0x85, 0x16, 0x24, 0xF5,
		0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x09, 0xFF, 0x80, 0x40, 0xFF, 0x00, 0xE3,
		0xFF,
	},
	{			/*  Init_CR30_CR4D */
		0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x20,
		0x00, 0x00, 0x00, 0x40, 0x00, 0xFF, 0xBF, 0xFF,
		0xA3, 0x7F, 0x00, 0x82, 0x0b, 0x6f, 0x57, 0x00,
		0x5c, 0x0f, 0xE0, 0xe0, 0x7F, 0x57,
	},
	{			/*  Init_CR90_CRA7 */
		0x55, 0xD9, 0x5D, 0xE1, 0x86, 0x1B, 0x8E, 0x26,
		0xDA, 0x8D, 0xDE, 0x94, 0x00, 0x00, 0x18, 0x00,
		0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x15, 0x03,
	},
};

#endif
